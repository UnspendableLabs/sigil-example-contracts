package kontor:contract;

world contract {
    include kontor:built-in/built-in;
    use kontor:built-in/context.{view-context, proc-context, signer};
    use kontor:built-in/error.{error};
    use kontor:built-in/foreign.{contract-address};
    use kontor:built-in/numbers.{integer, decimal};

  	record deposit-result {
  		lp-shares: integer,
  		deposit-a: integer,
  		deposit-b: integer,
  	}

  	record withdraw-result {
  		amount-a: integer,
  		amount-b: integer,
  	}

    export init: func(ctx: borrow<proc-context>);

    export re-init: func(ctx: borrow<proc-context>, token-a: contract-address, amount-a: integer, token-b: contract-address, amount-b: integer, fee: integer) -> result<integer, error>;

  	export fee: func(ctx: borrow<view-context>) -> integer;

    export balance: func(ctx: borrow<view-context>, acc: string) -> option<integer>;
    export transfer: func(ctx: borrow<proc-context>, to: string, n: integer) -> result<_, error>;

    export token-balance: func(ctx: borrow<view-context>, token: contract-address) -> result<integer, error>;
    export quote-deposit: func(ctx: borrow<view-context>, amount-a: integer, amount-b: integer) -> result<deposit-result, error>;
    export deposit: func(ctx: borrow<proc-context>, amount-a: integer, amount-b: integer) -> result<deposit-result, error>;
    export quote-withdraw: func(ctx: borrow<view-context>, shares: integer) -> result<withdraw-result, error>;
    export withdraw: func(ctx: borrow<proc-context>, shares: integer) -> result<withdraw-result, error>;


    export swap: func(ctx: borrow<proc-context>, token-in: contract-address, amount-in: integer, min-out: integer) -> result<integer, error>;
    export quote-swap: func(ctx: borrow<view-context>, token-in: contract-address, amount-in: integer) -> result<integer, error>;
}
